<?php

/**
 * @file
 * Infofinland permissions module.
 */

declare(strict_types = 1);

use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Access\AccessResult;


/**
 * hook_node_access_records().
 *
 * Returns the grants a node needs.
 */
function infofinland_permissions_node_access_records(NodeInterface $node) {
  $grants = [];

  if ($node->bundle() === 'link') {
    // Add node link grants based on municipality.
    if (!$node->get('field_municipality')->isEmpty()) {
      $municipalities = explode(', ', $node->get('field_municipality')->getString());

      foreach ($municipalities as $municipality) {
        $grants[] = [
          'realm' => 'custom_node_link_access',
          'gid' => $municipality,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 0,
        ];
      }
    }
  }

  if ($node->bundle() === 'page') {
    // Add node page grants based on municipality.
    if (!$node->get('field_municipality_selection')->isEmpty()) {
      $grants[] = [
        'realm' => 'custom_node_page_access',
        'gid' => $node->get('field_municipality_selection')->getString(),
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 0,
      ];
    }
  }

  return $grants;
}

/**
 * hook_node_grants().
 *
 * Returns the grants a user has.
 */
function infofinland_permissions_node_grants(AccountInterface $account, $op) {
  if ($op === 'view') {
    return;
  }

  $grants = [];

  // Give grants to municipal user based on municipality.
  if (in_array('municipal_editor', $account->getRoles())) {
    $user = User::load($account->id());

    if (!$user->get('field_municipality')->isEmpty()) {
      $municipalities = explode(',', $user->get('field_municipality')->getString());

      foreach ($municipalities as $municipality) {
        $grants['custom_node_page_access'][] = $municipality;
        $grants['custom_node_link_access'][] = $municipality;
      }
    }
  }

  return $grants;
}

/**
 * hook_views_pre_build().
 *
 * Limit municipal user permissions to see media entities in media browser.
 */
function infofinland_permissions_views_pre_build(ViewExecutable $view) {
  if (!$current_user = \Drupal::currentUser()) {
    return;
  }
  $roles = $current_user->getRoles();

  // Show only selected municipality nodes for municipality user.
  if ($view->id() === 'content') {
    if (in_array('infofinland_user', $roles) || in_array('admin', $roles)) {
      $args[] = 'all';
      $view->setArguments($args);
    } else {
      $user = User::load($current_user->id());
      $args[] = $user->get('field_municipality')->getString();
      $view->setArguments($args);
    }
  }

  if ($view->id() === 'linkit') {
    // Show all links for certain roles.
    if (in_array('infofinland_user', $roles) || in_array('admin', $roles)) {
      $args[] = 'all';
      $view->setArguments($args);
    } else {
      $args = [];
      $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
        'vid' => 'municipalitys'
      ]);

      foreach ($terms as $term) {
        $municipality_ids[] = $term->id();
      }

      $user = User::load($current_user->id());
      $user_municipalities = explode(', ', $user->get('field_municipality')->getString());
      // Allowed for everyone: Helsinki, Espoo,  Vantaa, Kauniainen.
      $allowed_municipality_ids = array_unique(['1', '2', '3', '4', ...$user_municipalities]);
      // Use exlude filtering to also show links without municipality.
      $args[] = implode(',', array_diff($municipality_ids,$allowed_municipality_ids));
      $view->setArguments($args);
    }
  }

  if ($view->id() === 'media_entity_browser') {
    // Show all media for certain roles.
    if (in_array('infofinland_user', $roles) || in_array('admin', $roles)) {
      $args[] = 'all';
      $view->setArguments($args);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Disable super admin editing from other users.
 */
function infofinland_permissions_user_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if (!$current_user = \Drupal::currentUser()) {
    return;
  }
  if ($entity->id() == 1 && $current_user->id() != 1) {
    return AccessResult::forbidden();
  }
  return AccessResult::neutral();
}
