<?php

/**
 * @file
 * Infofinland Common module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Database\Database;
use Drupal\Core\Entity\EntityInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_form_alter().
 */
function infofinland_common_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_page_edit_form') {
    $form['actions']['submit']['#submit'][] = 'redirectFunction';
  }
}

/**
 * Stay at node edit form after save.
 */
function redirectFunction(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\EntityForm $form_object */
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityForm) {
    $entity = $form_object->getEntity();

    $url = Url::fromRoute('entity.node.edit_form', ['node' => $entity->id()]);
    $form_state->setRedirectUrl($url);
    return;
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function infofinland_common_path_alias_update(Drupal\path_alias\PathAliasInterface $path_alias) {
  $path_alias_manager = \Drupal::entityTypeManager()->getStorage('path_alias');
  // Load translated path aliases.
  $alias_objects = $path_alias_manager->loadByProperties([
    'path' => $path_alias->get('path')->value,
  ]);

  foreach ($alias_objects as $alias_object) {
    // Update existing aliases if those don't match with current alias.
    if ($alias_object->get('alias')->value !== $path_alias->get('alias')->value) {
      $alias_object->set('alias', $path_alias->get('alias')->value);
      $alias_object->save();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param $variables
 */
function infofinland_common_preprocess_status_messages(&$variables) {
  if (isset($variables['message_list']['warning'])) {
    $status_messages = $variables['message_list']['warning'];
    foreach($status_messages as $delta => $message) {
      if (strpos((string) $message, 'The current translation is not in sync with the Finnish one') !== FALSE) {
        $variables['attributes']['class'] = 'custom-messages--warning';
      }
    }

  }
}

function infofinland_common_entity_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
  if (!$entity->get('field_municipality_selection')->isEmpty() && $entity->getType() === 'page') {
    $national_page_ids = [];
    $existing_municipality_info_paragraphs = [];

    // Get municipality liftup paragraphs that have a reference to this page.
    $drupal_db = Database::getConnection('default', 'default');
    $results = $drupal_db->select('paragraph__field_municipality_page', 'pfmp')
      ->fields('pfmp', ['entity_id'])
      ->condition('field_municipality_page_target_id', $entity->id());
    $municipality_liftup_paragraph_ids = $results->execute()->fetchCol();

    // Get parent page ids of the municipality paragraphs.
    foreach ($municipality_liftup_paragraph_ids as $paragraph_id) {
      $paragraph = \Drupal::entityTypeManager()->getStorage('paragraph')->load($paragraph_id);
      $parent_node = $paragraph->getParentEntity();
      $national_page_ids[] = $parent_node->id();
    }

    if ($entity->hasField('field_municipality_info')) {
      $field_municipality_info_values = $entity->get('field_municipality_info')->getValue();
      foreach ($field_municipality_info_values as $key => $field_municipality_info_value) {
        if ($municipality_info_paragraph = \Drupal::entityTypeManager()->getStorage('paragraph')->load($field_municipality_info_value['target_id'])) {
          $existing_municipality_info_paragraphs[] = $municipality_info_paragraph->get('field_national_page')->getString();

          // Remove paragraphs that aren't referenced from national pages anymore.
          if (!in_array($municipality_info_paragraph->get('field_national_page')->getString(), $national_page_ids)) {
            $entity->get('field_municipality_info')->removeItem($key);
            $entity->save();
            $municipality_info_paragraph->delete();
          }
        }
      }
    }

    // Create new municipality info paragraphs, if those aren't yet existing.
    foreach ($national_page_ids as $key => $national_page_id) {
      if (!in_array($national_page_id, $existing_municipality_info_paragraphs)) {
        var_dump('LISÄÄ');

        $paragraph = Paragraph::create([
          'type' => 'municipality_info',
        ]);
        $paragraph->isNew();
        $paragraph->set('field_national_page', $national_page_id);

        $field_municipality_info = $entity->get('field_municipality_info');
        $field_municipality_info->appendItem($paragraph);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function infofinland_common_form_node_page_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id != 'node_page_edit_form') {
    return;
  }
  $form['#attached']['library'][] = 'infofinland_common/infofinland_common';
  $node = $form_state->getFormObject()->getEntity();

  //or if you want to show field based on role use:

  // $current_user = \Drupal::currentUser();
  // $roles = $current_user->getRoles();
  // $form['your_field_name']['#access'] = in_array('editor', $roles);

  if ($node->id() !== null) {
    if ($node->langcode->value === 'fi') {
      return;
    }
    $contentFi = $node->getTranslation('fi')->get('field_content')->referencedEntities();
    $contentCountFi = count($contentFi);
    $currentNode = $node->get('field_content')->referencedEntities();
    $contentCountCurrent= count($currentNode);
    if ($contentCountCurrent !== $contentCountFi) {
      \Drupal::messenger()->addWarning('The current translation is not in sync with the Finnish one');
      return;
    } else {
      for ($x = 0; $x < $contentCountCurrent; $x++) {
        if ($currentNode[$x]->getType() !== $contentFi[$x]->getType()) {
          \Drupal::messenger()->addWarning('The current translation is not in sync with the Finnish one');
          return;
        }
      }
    }
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 *
 * Change ckeditor lang direction to RTL for Persian and Arabic.
 */
function infofinland_common_editor_js_settings_alter(array &$settings) {
  $content_language = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
  $rtl_languages = ['fa', 'ar'];
  if (in_array($content_language, $rtl_languages)){
    foreach ($settings['editor']['formats'] as $name => $value) {
      $settings['editor']['formats'][$name]['editorSettings']['contentsLangDirection'] = 'rtl';
    }
  }
}
